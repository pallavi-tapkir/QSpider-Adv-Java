package com.pallavi.ds.adv;

import java.util.List;
import java.util.PriorityQueue;

public class MaxProfitMinHeap {

	public static void main(String[] args) {
		System.out.println(solve(List.of(1,7,6,2,8,4,4,6,8,2), List.of(8,11,7,7,10,8,7,5,4,9)));
	}
	
	public static int solve(List<Integer> A, List<Integer> B) {
        int profit = 0;
        int time = 0;
        PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
        for(int i=0; i<A.size(); i++){
            if(time < A.get(i)){
                minHeap.add(B.get(i));
                time++;
            }else{
                if(B.get(i) > minHeap.peek()){
                    minHeap.poll();
                    minHeap.add(B.get(i));
                }
            }
        }

        while(!minHeap.isEmpty()){
            profit = profit+minHeap.poll() % 1000000007;
        }
        return profit;
    }

}
